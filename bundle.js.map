{"version":3,"sources":["webpack:///webpack/bootstrap e498fa77ce042953b2d2","webpack:///./javascript/main.js","webpack:///./javascript/game.js","webpack:///./javascript/gameControls.js","webpack:///./javascript/platform.js","webpack:///./javascript/runner.js","webpack:///./javascript/util.js","webpack:///./javascript/physics.js","webpack:///./javascript/gameConstants.js","webpack:///./javascript/levelGenerator.js","webpack:///./javascript/gameView.js","webpack:///./javascript/runnerAnimator.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACbD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;;;;;;ACnEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL,IAAG;;AAEH;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;ACvBA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACdA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrJA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;AC9BA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;AC/GA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;AChCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnHA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e498fa77ce042953b2d2\n **/","// loader for attaching to canvas DOM element\n\nvar RunnerGame = require('./game');\nvar GameView = require('./gameView');\n\nwindow.document.addEventListener('DOMContentLoaded', function () {\n  var canvas = window.document.getElementById('canvas');\n  var ctx = canvas.getContext('2d');\n  ctx.canvas.height = 650;\n  ctx.canvas.width = 1000;\n  var game = new RunnerGame(ctx.canvas.height, ctx.canvas.width);\n  var gameView = new GameView(game, ctx);\n  gameView.drawFrameAndLoop();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/main.js\n ** module id = 0\n ** module chunks = 0\n **/","// main game file\n\nvar GameControls = require('./gameControls');\nvar Platform = require('./platform');\nvar Runner = require('./runner');\nvar Util = require('./util');\nvar Physics = require('./physics');\nvar gameConstants = require('./gameConstants');\nvar LevelGenerator = require('./levelGenerator');\n\nvar RunnerGame = function (frameHeight, frameWidth) {\n  this.frameHeight = frameHeight;\n  this.frameWidth = frameWidth;\n  this.levelGenerator = new LevelGenerator(this);\n  this.platforms = this.levelGenerator.platforms;\n  this.runner = new Runner([150, 340]);\n  this.isPaused = false;\n  // set the jump key on the runner\n  GameControls.bindKeyHandlers(this, this.runner);\n};\n\nRunnerGame.prototype.allObjects = function () {\n  return this.platforms.concat([this.runner]);\n};\n\nRunnerGame.prototype.environmentObjects = function () {\n  return this.platforms.slice();\n};\n\nRunnerGame.prototype.draw = function (ctx) {\n  this.allObjects().forEach(function (obj) {\n    obj.draw.call(obj, ctx);\n  });\n};\n\nRunnerGame.prototype.togglePause = function () {\n  this.isPaused = !this.isPaused;\n};\n\nRunnerGame.prototype.advanceFrame = function () {\n  if (!this.isPaused) {\n    GameControls.checkHeldKeys(this.runner);\n    this.checkRunnerContact();\n    this.runner.move();\n    this.scroll();\n    this.levelGenerator.checkAndAddPlatform();\n  }\n};\n\nRunnerGame.prototype.scroll = function () {\n  var scrollMovement = [-(gameConstants.scrollSpeed), 0];\n  this.allObjects().forEach(function (obj) {\n    obj.pos = Util.vectorSum(obj.pos, scrollMovement);\n  });\n};\n\nRunnerGame.prototype.checkRunnerContact = function () {\n  // determine if the runner is in contact with any\n  // environment objects\n  this.environmentObjects().forEach(function (obj) {\n    var contact = Physics.detectContact(this.runner, obj);\n    if (contact) {\n      this.runner.handleContact(contact);\n    }\n  }.bind(this));\n};\n\nmodule.exports = RunnerGame;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/game.js\n ** module id = 1\n ** module chunks = 0\n **/","// handles user input (using Keymaster library via global 'key')\n\nvar GameControls = {\n\n  bindKeyHandlers: function (game, runner) {\n    key('up', function () {\n      runner.jump();\n    });\n    key('p', function () {\n      game.togglePause();\n    });\n  },\n\n  checkHeldKeys: function (runner) {\n    if (key.isPressed('left')) {\n      runner.runAccelerate('left');\n    } else if (key.isPressed('right')) {\n      runner.runAccelerate('right');\n    }\n  }\n\n};\n\nmodule.exports = GameControls;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/gameControls.js\n ** module id = 2\n ** module chunks = 0\n **/","// basic platform for running and jumping on\n// a platform's position is defined by its top-left corner\n\nvar Platform = function (pos, height, width) {\n  this.pos = pos;\n  this.height = height;\n  this.width = width;\n};\n\nPlatform.prototype.draw = function (ctx) {\n  ctx.fillStyle = 'rgb(96, 88, 119)';\n  ctx.fillRect(this.pos[0], this.pos[1], this.width, this.height)\n};\n\nmodule.exports = Platform;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/platform.js\n ** module id = 3\n ** module chunks = 0\n **/","// the player-controlled character\n\nvar Util = require('./util');\nvar Physics = require('./physics');\nvar gameConstants = require('./gameConstants');\nvar RunnerAnimator = require('./runnerAnimator');\n\nvar Runner = function (startingPos) {\n  this.pos = startingPos;\n  this.vel = [0, 0];\n  this.frameState = 'stand-right';\n  this.prevFrameState = 'stand-right';\n  this.lastContactType = 'stand';\n  this.jumpsRemaining = gameConstants.numJumps;\n  this.height = 50;\n  this.width = 20;\n  this.collideHeight = 50;\n  this.collideWidth = 20;\n  this.runnerAnimator = new RunnerAnimator(this);\n};\n\nRunner.prototype.draw = function (ctx) {\n  // delegates to RunnerAnimator\n  this.runnerAnimator.draw(ctx);\n};\n\nRunner.prototype.move = function () {\n  // make the movement for this frame based on last frame's\n  // velocity\n  this.pos = Util.vectorSum(this.pos, this.vel);\n  // then add the constant velocity components for the next frame\n  this.vel = Physics.addGravity(this.vel);\n  this.vel = Physics.addFriction(this.vel);\n  // and determine the state to start the next frame\n  this.determineState();\n};\n\nRunner.prototype.determineState = function () {\n  // uses previous state, previous contact type, and\n  // current velocity to determine current runner state\n\n  var newState;\n  if (this.vel[1] > 1 && this.vel[0] >= 0) {\n    newState = 'flip-right';\n  } else if (this.vel[1] > 1 && this.vel[0] < 0) {\n    newState = 'flip-left';\n  } else if (this.vel[0] > 0) {\n    newState = 'run-right';\n  } else if (this.vel[0] < 0) {\n    newState = 'run-left';\n  } else if (this.vel[0] === 0 &&\n    (this.prevFrameState === 'run-right' ||\n    this.prevFrameState === 'stand-right' ||\n    this.prevFrameState === 'flip-right')) {\n    newState = 'stand-right';\n  } else if (this.vel[0] === 0 &&\n    (this.prevFrameState === 'run-left' ||\n    this.prevFrameState === 'stand-left' ||\n    this.prevFrameState === 'flip-left')) {\n    newState = 'stand-left';\n  } else {\n    newState = 'stand-right';\n  }\n\n  // console.log(newState);\n\n  // uses state to set sprite\n  this.runnerAnimator.setSprite(newState);\n\n  // also control for size\n  if (newState === 'flip-right' ||\n  newState === 'flip-left') {\n    this.height = 40;\n    this.width = 40;\n  } else {\n    this.height = 50;\n    this.width = 20;\n  }\n\n  this.prevFrameState = this.frameState;\n  this.frameState = newState;\n\n};\n\nRunner.prototype.handleContact = function (contact) {\n  // handles contact detail object passed from Physics\n  if (contact.contactType === 'stand') {\n    this.jumpsRemaining = gameConstants.numJumps;\n    this.standOnPlatform();\n    this.lastContactType = 'stand';\n  }\n  if (contact.contactType === 'collision') {\n    this.jumpsRemaining = gameConstants.numJumps;\n    this.collideWithPlatform(contact.stopPos);\n    if (contact.fromDirection === 'above') {\n      this.lastContactType = 'collision';\n    }\n  }\n};\n\nRunner.prototype.standOnPlatform = function () {\n  this.vel = Physics.addNormalForce(this.vel);\n};\n\nRunner.prototype.collideWithPlatform = function (stopPos) {\n  // fully stop (not realistic, but feels less slippery)\n  this.vel = [0, 0];\n  this.pos = stopPos;\n};\n\nRunner.prototype.runAccelerate = function (dir) {\n  var sign;\n  if (dir === 'left') {\n    sign = -1;\n  } else if (dir === 'right') {\n    sign = 1;\n  }\n  // first ensure running is always equal to friction, to allow\n  // maintaining velocity\n  var runAccel = [sign * gameConstants.friction, 0];\n  // if velocity is less than max run velocity, add extra\n  // term beyond overcoming friction to allow acceleration\n\n  // FINDTAG this may break...\n  // if ((dir === 'left' && this.vel[0] >= -(gameConstants.maxRunVel)) ||\n  //   (dir === 'right' && this.vel[0] <= gameConstants.maxRunVel)) {\n\n  if (!(Math.sign(this.vel[0]) === sign &&\n    Math.abs(this.vel[0]) > gameConstants.maxRunVel)) {\n    // if adding the full extra acceleration would put the runner\n    // past max speed, only add the difference\n    var speedDelta = gameConstants.maxRunVel - Math.abs(this.vel[0]);\n    var accel = Math.min(speedDelta, gameConstants.runAccel);\n    var extraAccel = [sign * accel, 0];\n    runAccel = Util.vectorSum(runAccel, extraAccel);\n  }\n  this.vel = Util.vectorSum(this.vel, runAccel);\n};\n\nRunner.prototype.jump = function () {\n  if (this.jumpsRemaining > 0) {\n    // change vertical velocity immediately to jump velocity\n    // regardless of previous velocity (otherwise double jumps\n    // feel weak)\n    this.vel = [this.vel[0], -(gameConstants.jumpVel)];\n    this.jumpsRemaining -= 1;\n  }\n};\n\nmodule.exports = Runner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/runner.js\n ** module id = 4\n ** module chunks = 0\n **/","// general use functions\n\nvar Util = {\n\n  inherits: function (ChildClass, ParentClass) {\n    var Surrogate = function () {};\n    Surrogate.prototype = ParentClass.prototype;\n    ChildClass.prototype = new Surrogate();\n    ChildClass.prototype.constructor = ChildClass;\n  },\n\n  vectorSum: function (vectorA, vectorB) {\n    var x = vectorA[0] + vectorB[0];\n    var y = vectorA[1] + vectorB[1];\n    return [x, y];\n  },\n\n  isBetween: function(num, lowerBound, upperBound, inclusive) {\n    if (typeof inclusive === 'undefined') {\n      inclusive = true;\n    }\n    if (inclusive) {\n      return num >= lowerBound && num <= upperBound;\n    } else {\n      return num > lowerBound && num < upperBound;\n    }\n  }\n\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/util.js\n ** module id = 5\n ** module chunks = 0\n **/","// for dealing with gravity, friction, collisions, and contact\n\nvar gameConstants = require('./gameConstants');\nvar Util = require('./util');\n\nvar Physics = {\n\n  addGravity: function (vel) {\n    var gravityVector = [0, gameConstants.gravity];\n    return Util.vectorSum(vel, gravityVector);\n  },\n\n  addNormalForce: function (vel) {\n    var normalForceVector = [0, -(gameConstants.gravity)];\n    return Util.vectorSum(vel, normalForceVector);\n  },\n\n  addFriction: function (vel) {\n    // if addition of friction would reverse the velocity\n    // vector, just return 0 horizontal velocity\n    if (Math.abs(vel[0]) <= gameConstants.friction) {\n      return [0, vel[1]];\n    } else {\n      var friction = -(Math.sign(vel[0])) * gameConstants.friction;\n      var frictionVector = [friction, 0];\n      return Util.vectorSum(vel, frictionVector);\n    }\n  },\n\n  detectContact: function (objA, objB) {\n    // if there is contact, returns an object containing\n    // information on the contact\n    // otherwise returns null\n\n    // set up variable aliases for easier reading\n    var objALeft = objA.pos[0];\n    var objARight = objA.pos[0] + objA.width;\n    var objATop = objA.pos[1];\n    var objABottom = objA.pos[1] + objA.height;\n    var objAHorizVel = objA.vel[0];\n    var objAVertVel = objA.vel[1];\n    var objBLeft = objB.pos[0];\n    var objBRight = objB.pos[0] + objB.width;\n    var objBTop = objB.pos[1];\n    var objBBottom = objB.pos[1] + objB.height;\n\n\n\n    if (Util.isBetween(objABottom, objBTop, objBBottom) &&\n      (Util.isBetween(objARight, objBLeft, objBRight) ||\n      Util.isBetween(objALeft, objBLeft, objBRight))) {\n      // objA hits objB from above\n      // if objA velocity is only equal to gravity,\n      // objA is standing on objB\n      if (objAVertVel === gameConstants.gravity) {\n        return {\n          contactType: 'stand'\n        };\n      } else if (objAVertVel > 0) {\n        // need to account for the runner having two height\n        // values\n        var height = objA.collideHeight || objA.height;\n        return {\n          contactType: 'collision',\n          fromDirection: 'above',\n          stopPos: [objALeft, objBTop - height]\n        };\n      }\n\n    } else if (Util.isBetween(objATop, objBTop, objBBottom) &&\n      (Util.isBetween(objARight, objBLeft, objBRight) ||\n      Util.isBetween(objALeft, objBLeft, objBRight)) &&\n      objAVertVel < 0) {\n      return {\n        contactType: 'collision',\n        fromDirection: 'below',\n        stopPos: [objALeft, objBBottom]\n      };\n\n    } else if (Util.isBetween(objARight, objBLeft, objBRight) &&\n      (Util.isBetween(objATop, objBTop, objBBottom) ||\n      Util.isBetween(objABottom, objBTop, objBBottom)) &&\n      objAHorizVel > 0) {\n      // objA hits objB from the left\n      // need to account for the runner having two width\n      // values\n      var width = objA.collideWidth || objA.width;\n      return {\n        contactType: 'collision',\n        fromDirection: 'left',\n        stopPos: [objBLeft - width, objATop]\n      };\n\n    } else if (Util.isBetween(objALeft, objBLeft, objBRight) &&\n      (Util.isBetween(objATop, objBTop, objBBottom) ||\n      Util.isBetween(objABottom, objBTop, objBBottom)) &&\n      objAHorizVel < 0) {\n      // objA hits objB from the right\n      return {\n        contactType: 'collision',\n        fromDirection: 'right',\n        stopPos: [objBRight, objATop]\n      };\n\n    } else {\n      return null;\n    }\n  }\n\n};\n\nmodule.exports = Physics;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/physics.js\n ** module id = 6\n ** module chunks = 0\n **/","// all constants, to allow for easier adjustments\n\nvar gameConstants = {\n\n  framesPerSprite: 5,\n\n  gravity: 0.4,\n\n  maxRunVel: 7,\n\n  runAccel: 2,\n\n  jumpVel: 10,\n\n  friction: 2,\n\n  scrollSpeed: 0, // 6\n\n  platformMinHeight: 20,\n\n  platformAddHeight: 30,\n\n  platformMinWidth: 75,\n\n  platformAddWidth: 300,\n\n  jumpMaxMagnitude: 300,\n\n  numJumps: 10000 // 2\n\n};\n\nmodule.exports = gameConstants;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/gameConstants.js\n ** module id = 7\n ** module chunks = 0\n **/","// manages generation and storage of environment objects\n\nvar gameConstants = require('./gameConstants');\nvar Platform = require('./platform');\n\nvar LevelGenerator = function (game) {\n  this.game = game;\n  this.platforms = [];\n  this.nextVerticalPos = 0;\n  this.nextGap = 0;\n  this.lastPlatform = null;\n  this.setFirstPlatform();\n  this.setNextValues();\n};\n\nLevelGenerator.prototype.randPlatformHeight = function () {\n  return gameConstants.platformMinHeight +\n    Math.round(gameConstants.platformAddHeight * Math.random());\n};\n\nLevelGenerator.prototype.randPlatformWidth = function () {\n  return gameConstants.platformMinWidth +\n    Math.round(gameConstants.platformAddWidth * Math.random());\n};\n\nLevelGenerator.prototype.setFirstPlatform = function () {\n  // guarantee first platform is always in the same position\n  var firstPlatform = new Platform([100, 400], 30, 150);\n  // also set it as last platform so next numbers can refer\n  // to it\n  this.lastPlatform = firstPlatform;\n  this.platforms.push(firstPlatform);\n\n  var test = new Platform([500, 300], 300, 150);\n  this.platforms.push(test);\n};\n\nLevelGenerator.prototype.lastPlatformTop = function () {\n  if (this.lastPlatform) {\n    return this.lastPlatform.pos[1];\n  }\n};\n\nLevelGenerator.prototype.lastPlatformEdge = function () {\n  if (this.lastPlatform) {\n    return this.lastPlatform.pos[0] + this.lastPlatform.width;\n  }\n};\n\nLevelGenerator.prototype.setNextValues = function () {\n  this.nextVerticalPos = this.platformVerticalPos();\n  this.nextGap = this.platformGap();\n};\n\nLevelGenerator.prototype.platformVerticalPos = function () {\n  // platform must be within band of 60 pixels from either\n  // top or bottom of the screen, as well as at least 10 pixels\n  // less than the previous platform top plus the max\n  // jump magnitude\n  // remember, y-offset is from the top so everything is backwards\n  var forceBottom = this.game.frameHeight - 60;\n  var forceTop = 60;\n  var jumpTop = this.lastPlatformTop() -\n    gameConstants.jumpMaxMagnitude + 10;\n  var top = Math.max(forceTop, jumpTop);\n  var heightBand = forceBottom - top;\n  return top + Math.round(heightBand * Math.random());\n};\n\nLevelGenerator.prototype.platformGap = function () {\n  // ensure that absolute distance to next platform is valid\n  // (i.e. high platforms aren't far, far platforms aren't\n  // high)\n  var verticalGap = this.lastPlatformTop() - this.nextVerticalPos;\n  var maxGap;\n  if (verticalGap > 0) {\n    maxGap = Math.round(\n      Math.sqrt(\n        Math.pow(gameConstants.jumpMaxMagnitude, 2) -\n        Math.pow(verticalGap, 2)\n      )\n    );\n  } else {\n    maxGap = Math.round(\n      Math.sqrt(Math.pow(gameConstants.jumpMaxMagnitude, 2) / 2)\n    );\n  }\n\n  return maxGap;\n\n\n  // return Math.round(maxGap / 2) + Math.round((maxGap / 2) *\n  // Math.random());\n};\n\nLevelGenerator.prototype.checkAndAddPlatform = function () {\n  // check on each frame, and when the next platform to be drawn\n  // is about to come on the screen, generate it and pick the\n  // next numbers\n  if (this.lastPlatformEdge() + this.nextGap <\n    this.game.frameWidth + 2) {\n    var height = this.randPlatformHeight();\n    var width = this.randPlatformWidth();\n    var verticalPos = this.nextVerticalPos;\n    var horizontalPos = this.game.frameWidth + 1;\n    var newPlatform = new Platform([horizontalPos, verticalPos],\n      height, width);\n    // set it as last platform and select the numbers for\n    // the next one to be generated\n    this.lastPlatform = newPlatform;\n    this.platforms.push(newPlatform);\n    this.setNextValues();\n  }\n};\n\nmodule.exports = LevelGenerator;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/levelGenerator.js\n ** module id = 8\n ** module chunks = 0\n **/","// handles game's interaction wtih canvas element\n\nvar GameView = function (game, ctx) {\n  this.game = game;\n  this.ctx = ctx;\n};\n\nGameView.prototype.drawFrameAndLoop = function () {\n  window.requestAnimationFrame(function () {\n    this.generateFrame();\n  }.bind(this));\n};\n\nGameView.prototype.generateFrame = function () {\n  this.ctx.clearRect(0, 0, this.game.frameWidth, this.game.frameHeight);\n  this.game.draw(this.ctx);\n  this.game.advanceFrame();\n  this.drawFrameAndLoop();\n};\n\nmodule.exports = GameView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/gameView.js\n ** module id = 9\n ** module chunks = 0\n **/","// controls animation of runner sprite\n\nvar gameConstants = require('./gameConstants');\n\nvar RunnerAnimator = function (runner) {\n  this.runner = runner;\n  this.spriteAssets = {};\n  this.spriteFrame = 1;\n  this.spriteFrameCount = {\n    'stand-right': 1,\n    'stand-left': 1,\n    'run-right': 6,\n    'run-left': 6,\n    'flip-right': 6,\n    'flip-left': 6\n  };\n  this.loadSpriteAssets();\n};\n\nRunnerAnimator.prototype.loadSpriteAssets = function () {\n  var spriteIds = ['stand-right1', 'stand-left1', 'run-right1',\n    'run-right2', 'run-right3', 'run-right4', 'run-right5',\n    'run-right6', 'run-left1', 'run-left2', 'run-left3',\n    'run-left4', 'run-left5', 'run-left6', 'flip-right1', 'flip-right2',\n    'flip-right3', 'flip-right4', 'flip-right5', 'flip-right6',\n    'flip-left1', 'flip-left2', 'flip-left3', 'flip-left4',\n    'flip-left5', 'flip-left6'];\n  spriteIds.forEach(function (id) {\n    this.spriteAssets[id] = window.document.getElementById(id);\n  }.bind(this));\n};\n\nRunnerAnimator.prototype.draw = function (ctx) {\n  var id = this.runner.frameState + (Math.floor(this.spriteFrame /\n    gameConstants.framesPerSprite) + 1);\n  var sprite = this.spriteAssets[id];\n  ctx.drawImage(\n    sprite, this.runner.pos[0], this.runner.pos[1], this.runner.width,\n      this.runner.height\n  );\n};\n\nRunnerAnimator.prototype.setSprite = function (newState) {\n  if (newState === this.runner.prevFrameState) {\n    if (this.spriteFrame + 1 < this.spriteFrameCount[newState] *\n      gameConstants.framesPerSprite) {\n        this.spriteFrame = this.spriteFrame + 1;\n      } else {\n        this.spriteFrame = 1;\n      }\n    } else {\n      this.spriteFrame = 1;\n    }\n};\n\nmodule.exports = RunnerAnimator;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./javascript/runnerAnimator.js\n ** module id = 10\n ** module chunks = 0\n **/"],"sourceRoot":""}